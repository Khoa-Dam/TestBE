import { getDraft } from "./draft";
import { publishIPFS } from "./draft";
import {
  configureAllOneBuild,
  deployBuild,
  getMintProgress,
  markMinted,
  onchainSync,
  randomMint,
} from "./signing";

// ========================================================================
// NFT COLLECTION WORKFLOW CLASS
// ========================================================================
export class NFTCollectionWorkflow {
  constructor(public draftId: string) {}

  // Step 2: Publish IPFS
  async publishIPFS(startIndex = 0) {
    return publishIPFS(this.draftId, startIndex);
  }

  // Step 3: Deploy Collection
  async deployCollection(
    adminAddr: string,
    signAndSubmitTx: (buildTxResponse: any) => Promise<{ hash: string }>
  ) {
    const buildTxResponse = await deployBuild(this.draftId, adminAddr);

    // buildTxResponse is BuildTxResponse format, pass it directly
    const txResult = await signAndSubmitTx(buildTxResponse);

    // NOTE: onchainSync is now handled manually with transaction hash
    // Don't auto-sync here anymore

    return txResult.hash;
  }

  // Step 4: Configure (optional)
  async configure(
    adminAddr: string,
    signAndSubmitTx: (buildTxResponse: any) => Promise<{ hash: string }>
  ) {
    try {
      console.log(
        `ƒêang c·∫•u h√¨nh collection v·ªõi draftId: ${this.draftId}, adminAddr: ${adminAddr}`
      );

      // L·∫•y th√¥ng tin draft ƒë·ªÉ ki·ªÉm tra th·ªùi gian
      const draft = await getDraft(this.draftId);
      if (draft.config?.schedule) {
        const { presaleStart, publicStart, saleEnd } = draft.config.schedule;
        const now = Math.floor(Date.now() / 1000);

        console.log(
          "üìÖ Th·ªùi gian hi·ªán t·∫°i:",
          new Date(now * 1000).toLocaleString()
        );
        console.log(
          "üìÖ Th·ªùi gian presale:",
          new Date(presaleStart * 1000).toLocaleString()
        );
        console.log(
          "üìÖ Th·ªùi gian public sale:",
          new Date(publicStart * 1000).toLocaleString()
        );
        console.log(
          "üìÖ Th·ªùi gian k·∫øt th√∫c sale:",
          new Date(saleEnd * 1000).toLocaleString()
        );

        // Ki·ªÉm tra l·ªói E_SALE_CLOSED
        // if (saleEnd <= now) {
        //   console.error("‚ùå L·ªói E_SALE_CLOSED: Th·ªùi gian k·∫øt th√∫c sale ƒë√£ qua");
        //   throw new Error(
        //     "Th·ªùi gian k·∫øt th√∫c sale ƒë√£ qua. Vui l√≤ng ƒëi·ªÅu ch·ªânh th·ªùi gian ƒë·ªÉ sale k·∫øt th√∫c trong t∆∞∆°ng lai."
        //   );
        // }
      }

      // Verify admin address format
      if (!adminAddr || adminAddr.length < 10) {
        console.error("ƒê·ªãa ch·ªâ admin kh√¥ng h·ª£p l·ªá:", adminAddr);
        throw new Error("ƒê·ªãnh d·∫°ng ƒë·ªãa ch·ªâ admin kh√¥ng h·ª£p l·ªá");
      }

      // Get build transaction with improved error handling
      let buildTxResponse;
      try {
        buildTxResponse = await configureAllOneBuild(this.draftId, adminAddr);
      } catch (buildError) {
        console.error("L·ªói khi t·∫°o giao d·ªãch c·∫•u h√¨nh:", buildError);
        throw new Error(
          `L·ªói khi t·∫°o giao d·ªãch c·∫•u h√¨nh: ${(buildError as Error).message}`
        );
      }

      console.log("Build TX Response:", buildTxResponse);

      // Validate response
      if (!buildTxResponse || !buildTxResponse.payload) {
        console.error("Invalid build response:", buildTxResponse);
        throw new Error("Invalid build response from server");
      }

      // Log detailed information
      console.log("Function to call:", buildTxResponse.payload.function);
      console.log(
        "Type arguments:",
        buildTxResponse.payload.typeArguments || []
      );
      console.log(
        "Function arguments count:",
        (buildTxResponse.payload.functionArguments || []).length
      );

      // Add a small delay to ensure UI is ready
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // Sign and submit with better error handling
      try {
        console.log("ƒêang k√Ω v√† g·ª≠i giao d·ªãch...");
        const txResult = await signAndSubmitTx(buildTxResponse);
        console.log("K·∫øt qu·∫£ giao d·ªãch:", txResult);
        return txResult.hash;
      } catch (signError) {
        console.error("L·ªói khi k√Ω giao d·ªãch:", signError);

        // X·ª≠ l√Ω c√°c l·ªói ph·ªï bi·∫øn
        const errorMsg = (signError as Error).message || "";

        if (errorMsg.includes("E_SALE_CLOSED")) {
          throw new Error(`L·ªói E_SALE_CLOSED: Th·ªùi gian sale kh√¥ng h·ª£p l·ªá. Vui l√≤ng ƒëi·ªÅu ch·ªânh th·ªùi gian trong c·∫•u h√¨nh ƒë·ªÉ ƒë·∫£m b·∫£o:
          1. T·∫•t c·∫£ c√°c th·ªùi gian ƒë·ªÅu trong t∆∞∆°ng lai
          2. Th·ªùi gian k·∫øt th√∫c sale ph·∫£i sau th·ªùi gian public sale √≠t nh·∫•t 1 gi·ªù`);
        } else if (errorMsg.includes("E_SCHEDULE_ORDER")) {
          throw new Error(`L·ªói E_SCHEDULE_ORDER: Th·ª© t·ª± th·ªùi gian kh√¥ng ƒë√∫ng. Vui l√≤ng ƒë·∫£m b·∫£o:
          1. Th·ªùi gian public sale ph·∫£i sau th·ªùi gian presale
          2. Th·ªùi gian k·∫øt th√∫c sale ph·∫£i sau th·ªùi gian public sale`);
        } else {
          throw new Error(`L·ªói khi k√Ω giao d·ªãch: ${errorMsg}`);
        }
      }
    } catch (error) {
      console.error("Configure error:", error);
      throw error;
    }
  }

  // Step 5: Random Mint
  async randomMint(
    payerAddr: string,
    signAndSubmitTx: (tx: any) => Promise<{ hash: string }>,
    toAddr?: string
  ) {
    try {
      console.log(`ƒêang mint NFT cho collection v·ªõi draftId: ${this.draftId}`);
      console.log(`ƒê·ªãa ch·ªâ ng∆∞·ªùi tr·∫£ ph√≠: ${payerAddr}`);
      console.log(`ƒê·ªãa ch·ªâ nh·∫≠n NFT: ${toAddr || payerAddr}`);

      // L·∫•y th√¥ng tin draft ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i
      const draft = await getDraft(this.draftId);
      if (!draft.ownerAddr) {
        throw new Error(
          "Resource Account ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p. Vui l√≤ng ho√†n th√†nh b∆∞·ªõc Deploy tr∆∞·ªõc."
        );
      }

      // Th√™m ƒë·ªô tr·ªÖ nh·ªè ƒë·ªÉ chu·∫©n b·ªã UI
      await new Promise((resolve) => setTimeout(resolve, 500));

      // L·∫•y th√¥ng tin mint t·ª´ API
      let data;
      try {
        data = await randomMint(this.draftId, payerAddr, toAddr);
        console.log("D·ªØ li·ªáu giao d·ªãch mint:", data);
      } catch (mintError) {
        console.error("L·ªói khi t·∫°o giao d·ªãch mint:", mintError);
        throw new Error(
          `Kh√¥ng th·ªÉ t·∫°o giao d·ªãch mint: ${(mintError as Error).message}`
        );
      }

      // Ki·ªÉm tra d·ªØ li·ªáu giao d·ªãch
      if (!data || !data.transaction) {
        throw new Error("Kh√¥ng nh·∫≠n ƒë∆∞·ª£c d·ªØ li·ªáu giao d·ªãch h·ª£p l·ªá t·ª´ server");
      }

      console.log("Chu·∫©n b·ªã k√Ω v√† g·ª≠i giao d·ªãch mint...");

      // Th√™m ƒë·ªô tr·ªÖ tr∆∞·ªõc khi k√Ω
      await new Promise((resolve) => setTimeout(resolve, 1000));

      // K√Ω v√† g·ª≠i giao d·ªãch
      let txResult;
      try {
        txResult = await signAndSubmitTx(data.transaction);
        console.log("K·∫øt qu·∫£ giao d·ªãch mint:", txResult);
      } catch (signError) {
        console.error("L·ªói khi k√Ω giao d·ªãch mint:", signError);
        throw new Error(
          `L·ªói khi k√Ω giao d·ªãch mint: ${(signError as Error).message}`
        );
      }

      // ƒê√°nh d·∫•u l√† ƒë√£ mint
      try {
        await markMinted(this.draftId, data.tokenIndex);
      } catch (markError) {
        console.warn(
          `C·∫£nh b√°o: Kh√¥ng th·ªÉ ƒë√°nh d·∫•u token ƒë√£ mint, nh∆∞ng mint ƒë√£ th√†nh c√¥ng: ${
            (markError as Error).message
          }`
        );
      }

      return {
        txHash: txResult.hash,
        metadata: data.metadata,
        tokenIndex: data.tokenIndex,
      };
    } catch (error) {
      console.error("L·ªói trong qu√° tr√¨nh mint:", error);
      throw error;
    }
  }

  // Get progress
  async getProgress() {
    return getMintProgress(this.draftId);
  }

  // Get draft info
  async getDraft() {
    return getDraft(this.draftId);
  }
}
